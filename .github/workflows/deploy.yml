name: Deploy File Storage API

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        shell: powershell
        run: |
          docker-compose build file-storage

      - name: Deploy service
        shell: powershell
        env:
          DB_HOST: host.docker.internal
          DB_PORT: 5432
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          STORAGE_VOLUME_PATH: 'Y:/FileStorage'
          NODE_ENV: production
        run: |
          @"
          DB_HOST=$env:DB_HOST
          DB_PORT=$env:DB_PORT
          DB_USERNAME=$env:DB_USERNAME
          DB_PASSWORD=$env:DB_PASSWORD
          DB_DATABASE=$env:DB_DATABASE
          STORAGE_VOLUME_PATH=$env:STORAGE_VOLUME_PATH
          NODE_ENV=$env:NODE_ENV
          "@ | Out-File -Encoding utf8 .env

          docker-compose run --rm file-storage npm run migration:run

          $containerExists = docker ps -a --filter "name=file-storage" --format "{{.Names}}"
          if ($containerExists) {
            Write-Host "Stopping and removing existing container..."
            docker stop file-storage
            docker rm file-storage
          }

          docker-compose up -d file-storage

          docker ps -f name=file-storage

      - name: Cleanup
        shell: powershell
        run: |
          docker image prune -a --filter "until=72h" --force
