name: deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        shell: powershell
        run: |
          docker-compose build file-storage

      - name: Run database migrations
        shell: powershell
        env:
          DB_HOST: host.docker.internal
          DB_PORT: 5432
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          NODE_ENV: production
        run: |
          $imageId = docker-compose images -q file-storage

          docker run --rm `
            -e DB_HOST=$env:DB_HOST `
            -e DB_PORT=$env:DB_PORT `
            -e DB_USERNAME=$env:DB_USERNAME `
            -e DB_PASSWORD=$env:DB_PASSWORD `
            -e DB_DATABASE=$env:DB_DATABASE `
            -e NODE_ENV=$env:NODE_ENV `
            --add-host=host.docker.internal:host-gateway `
            $imageId `
            npm run migration:run

      - name: Deploy services
        shell: powershell
        env:
          DB_HOST: host.docker.internal
          DB_PORT: 5432
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          STORAGE_VOLUME_PATH: 'Y:/FileStorage'
          FILE_STORAGE_PATH: '/app/storage'
          NODE_ENV: production
          PORT: 3001
        run: |
          $containerExists = docker ps -a --filter "name=file-storage" --format "{{.Names}}"
          if ($containerExists) {
            Write-Host "Stopping existing container"
            docker-compose stop file-storage
            docker-compose rm -f file-storage
          } else {
            Write-Host "Container doesn't exist, continuing..."
          }

          $env:COMPOSE_DOCKER_CLI_BUILD = 0

          docker-compose up -d --no-deps `
            -e DB_HOST `
            -e DB_PORT `
            -e DB_USERNAME `
            -e DB_PASSWORD `
            -e DB_DATABASE `
            -e STORAGE_VOLUME_PATH `
            -e FILE_STORAGE_PATH `
            -e NODE_ENV `
            -e PORT `
            file-storage

          docker-compose ps

      - name: Cleanup
        shell: powershell
        run: |
          docker image prune -f
